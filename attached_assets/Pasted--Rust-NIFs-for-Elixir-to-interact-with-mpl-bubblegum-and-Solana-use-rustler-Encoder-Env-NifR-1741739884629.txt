//! Rust NIFs for Elixir to interact with mpl-bubblegum and Solana

use rustler::{Encoder, Env, NifResult, Term};
use solana_sdk::{
    signature::{Keypair, Signer},
    transaction::Transaction,
    pubkey::Pubkey,
    commitment_config::CommitmentConfig,
    rpc_client::RpcClient,
};
use std::sync::Mutex;
use ttl_cache::TtlCache;
use std::time::Duration;
use lazy_static::lazy_static;
use thiserror::Error;

// Define cache
lazy_static! {
    static ref CACHE: Mutex<TtlCache<String, String>> = Mutex::new(TtlCache::new(100));
}

#[derive(Error, Debug)]
pub enum NifError {
    #[error("RPC Error: {0}")]
    RpcError(String),
    #[error("Invalid Input")]
    InvalidInput,
    #[error("Transaction Failed")]
    TransactionFailed,
}

impl<'a> Encoder for NifError {
    fn encode<'b>(&self, env: Env<'b>) -> Term<'b> {
        format!("{:?}", self).encode(env)
    }
}

#[rustler::nif]
fn create_tree_config() -> NifResult<String> {
    // TODO: Implement interaction with mpl-bubblegum
    Ok("Tree Config Created".to_string())
}

#[rustler::nif]
fn mint_nft() -> NifResult<String> {
    // TODO: Implement NFT minting logic
    Ok("NFT Minted".to_string())
}

#[rustler::nif]
fn transfer_nft() -> NifResult<String> {
    // TODO: Implement NFT transfer logic
    Ok("NFT Transferred".to_string())
}

#[rustler::nif]
fn fetch_metadata(nft_address: String) -> NifResult<String> {
    let mut cache = CACHE.lock().unwrap();
    if let Some(metadata) = cache.get(&nft_address) {
        return Ok(metadata.clone());
    }
    
    let rpc_client = RpcClient::new("https://api.devnet.solana.com".to_string());
    let account_info = rpc_client.get_account(&nft_address.parse::<Pubkey>().unwrap());
    
    match account_info {
        Ok(account) => {
            let metadata = format!("Metadata: {:?}", account);
            cache.insert(nft_address.clone(), metadata.clone(), Duration::from_secs(600));
            Ok(metadata)
        },
        Err(e) => Err(NifError::RpcError(e.to_string()).into()),
    }
}

#[rustler::nif]
fn verify_proof(proof: String) -> NifResult<bool> {
    // TODO: Implement real Merkle proof verification logic
    Ok(true)
}

#[rustler::nif]
fn clear_cache() -> NifResult<String> {
    let mut cache = CACHE.lock().unwrap();
    cache.clear();
    Ok("Cache Cleared".to_string())
}

#[rustler::nif]
fn get_cache_stats() -> NifResult<(usize, usize)> {
    let cache = CACHE.lock().unwrap();
    Ok((cache.len(), cache.capacity()))
}

rustler::init!("Elixir.MplBubblegumNIF", [
    create_tree_config, 
    mint_nft, 
    transfer_nft,
    fetch_metadata,
    verify_proof,
    clear_cache,
    get_cache_stats
]);
